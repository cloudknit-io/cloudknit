// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/compuzest/zlifecycle-il-operator/controller/common/git (interfaces: API)

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	object "github.com/go-git/go-git/v5/plumbing/object"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockAPI) Clone(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockAPIMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockAPI)(nil).Clone), arg0, arg1)
}

// Commit mocks base method.
func (m *MockAPI) Commit(arg0 *CommitInfo) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockAPIMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockAPI)(nil).Commit), arg0)
}

// CommitAndPush mocks base method.
func (m *MockAPI) CommitAndPush(arg0 *CommitInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAndPush", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitAndPush indicates an expected call of CommitAndPush.
func (mr *MockAPIMockRecorder) CommitAndPush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAndPush", reflect.TypeOf((*MockAPI)(nil).CommitAndPush), arg0)
}

// HeadCommitHash mocks base method.
func (m *MockAPI) HeadCommitHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadCommitHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadCommitHash indicates an expected call of HeadCommitHash.
func (mr *MockAPIMockRecorder) HeadCommitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadCommitHash", reflect.TypeOf((*MockAPI)(nil).HeadCommitHash))
}

// Open mocks base method.
func (m *MockAPI) Open(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockAPIMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAPI)(nil).Open), arg0)
}

// Push mocks base method.
func (m *MockAPI) Push() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push")
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockAPIMockRecorder) Push() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockAPI)(nil).Push))
}
