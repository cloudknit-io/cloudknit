// Code generated by MockGen. DO NOT EDIT.
// Source: ./file.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	template "text/template"

	v1alpha1 "github.com/compuzest/zlifecycle-il-operator/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockUtilFile is a mock of UtilFile interface.
type MockUtilFile struct {
	ctrl     *gomock.Controller
	recorder *MockUtilFileMockRecorder
}

// MockUtilFileMockRecorder is the mock recorder for MockUtilFile.
type MockUtilFileMockRecorder struct {
	mock *MockUtilFile
}

// NewMockUtilFile creates a new mock instance.
func NewMockUtilFile(ctrl *gomock.Controller) *MockUtilFile {
	mock := &MockUtilFile{ctrl: ctrl}
	mock.recorder = &MockUtilFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilFile) EXPECT() *MockUtilFileMockRecorder {
	return m.recorder
}

// CreateEmptyDirectory mocks base method.
func (m *MockUtilFile) CreateEmptyDirectory(folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmptyDirectory", folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmptyDirectory indicates an expected call of CreateEmptyDirectory.
func (mr *MockUtilFileMockRecorder) CreateEmptyDirectory(folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyDirectory", reflect.TypeOf((*MockUtilFile)(nil).CreateEmptyDirectory), folderName)
}

// SaveFileFromString mocks base method.
func (m *MockUtilFile) SaveFileFromString(jsonString, folderName, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileFromString", jsonString, folderName, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileFromString indicates an expected call of SaveFileFromString.
func (mr *MockUtilFileMockRecorder) SaveFileFromString(jsonString, folderName, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileFromString", reflect.TypeOf((*MockUtilFile)(nil).SaveFileFromString), jsonString, folderName, fileName)
}

// SaveFileFromTemplate mocks base method.
func (m *MockUtilFile) SaveFileFromTemplate(t *template.Template, vars interface{}, folderName, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileFromTemplate", t, vars, folderName, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileFromTemplate indicates an expected call of SaveFileFromTemplate.
func (mr *MockUtilFileMockRecorder) SaveFileFromTemplate(t, vars, folderName, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileFromTemplate", reflect.TypeOf((*MockUtilFile)(nil).SaveFileFromTemplate), t, vars, folderName, fileName)
}

// SaveVarsToFile mocks base method.
func (m *MockUtilFile) SaveVarsToFile(variables []*v1alpha1.Variable, folderName, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVarsToFile", variables, folderName, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVarsToFile indicates an expected call of SaveVarsToFile.
func (mr *MockUtilFileMockRecorder) SaveVarsToFile(variables, folderName, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVarsToFile", reflect.TypeOf((*MockUtilFile)(nil).SaveVarsToFile), variables, folderName, fileName)
}

// SaveYamlFile mocks base method.
func (m *MockUtilFile) SaveYamlFile(obj interface{}, folderName, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveYamlFile", obj, folderName, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveYamlFile indicates an expected call of SaveYamlFile.
func (mr *MockUtilFileMockRecorder) SaveYamlFile(obj, folderName, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveYamlFile", reflect.TypeOf((*MockUtilFile)(nil).SaveYamlFile), obj, folderName, fileName)
}
