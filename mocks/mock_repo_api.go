// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/compuzest/zlifecycle-il-operator/controllers/util/repo (interfaces: Registration)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistration is a mock of Registration interface.
type MockRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationMockRecorder
}

// MockRegistrationMockRecorder is the mock recorder for MockRegistration.
type MockRegistrationMockRecorder struct {
	mock *MockRegistration
}

// NewMockRegistration creates a new mock instance.
func NewMockRegistration(ctrl *gomock.Controller) *MockRegistration {
	mock := &MockRegistration{ctrl: ctrl}
	mock.recorder = &MockRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistration) EXPECT() *MockRegistrationMockRecorder {
	return m.recorder
}

// TryRegisterRepo mocks base method.
func (m *MockRegistration) TryRegisterRepo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryRegisterRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryRegisterRepo indicates an expected call of TryRegisterRepo.
func (mr *MockRegistrationMockRecorder) TryRegisterRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryRegisterRepo", reflect.TypeOf((*MockRegistration)(nil).TryRegisterRepo), arg0)
}
