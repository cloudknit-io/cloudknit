// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/compuzest/zlifecycle-il-operator/controllers/util/github (interfaces: GitApi,RepositoryApi)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v32/github"
)

// MockGitApi is a mock of GitApi interface.
type MockGitApi struct {
	ctrl     *gomock.Controller
	recorder *MockGitApiMockRecorder
}

// MockGitApiMockRecorder is the mock recorder for MockGitApi.
type MockGitApiMockRecorder struct {
	mock *MockGitApi
}

// NewMockGitApi creates a new mock instance.
func NewMockGitApi(ctrl *gomock.Controller) *MockGitApi {
	mock := &MockGitApi{ctrl: ctrl}
	mock.recorder = &MockGitApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitApi) EXPECT() *MockGitApiMockRecorder {
	return m.recorder
}

// CreateCommit mocks base method.
func (m *MockGitApi) CreateCommit(arg0, arg1 string, arg2 *github.Commit) (*github.Commit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommit indicates an expected call of CreateCommit.
func (mr *MockGitApiMockRecorder) CreateCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockGitApi)(nil).CreateCommit), arg0, arg1, arg2)
}

// CreateTree mocks base method.
func (m *MockGitApi) CreateTree(arg0, arg1, arg2 string, arg3 []*github.TreeEntry) (*github.Tree, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Tree)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockGitApiMockRecorder) CreateTree(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockGitApi)(nil).CreateTree), arg0, arg1, arg2, arg3)
}

// GetCommit mocks base method.
func (m *MockGitApi) GetCommit(arg0, arg1, arg2 string) (*github.Commit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockGitApiMockRecorder) GetCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGitApi)(nil).GetCommit), arg0, arg1, arg2)
}

// GetRef mocks base method.
func (m *MockGitApi) GetRef(arg0, arg1, arg2 string) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRef indicates an expected call of GetRef.
func (mr *MockGitApiMockRecorder) GetRef(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockGitApi)(nil).GetRef), arg0, arg1, arg2)
}

// GetTree mocks base method.
func (m *MockGitApi) GetTree(arg0, arg1, arg2 string, arg3 bool) (*github.Tree, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Tree)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTree indicates an expected call of GetTree.
func (mr *MockGitApiMockRecorder) GetTree(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockGitApi)(nil).GetTree), arg0, arg1, arg2, arg3)
}

// UpdateRef mocks base method.
func (m *MockGitApi) UpdateRef(arg0, arg1 string, arg2 *github.Reference, arg3 bool) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRef indicates an expected call of UpdateRef.
func (mr *MockGitApiMockRecorder) UpdateRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRef", reflect.TypeOf((*MockGitApi)(nil).UpdateRef), arg0, arg1, arg2, arg3)
}

// MockRepositoryApi is a mock of RepositoryApi interface.
type MockRepositoryApi struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryApiMockRecorder
}

// MockRepositoryApiMockRecorder is the mock recorder for MockRepositoryApi.
type MockRepositoryApiMockRecorder struct {
	mock *MockRepositoryApi
}

// NewMockRepositoryApi creates a new mock instance.
func NewMockRepositoryApi(ctrl *gomock.Controller) *MockRepositoryApi {
	mock := &MockRepositoryApi{ctrl: ctrl}
	mock.recorder = &MockRepositoryApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryApi) EXPECT() *MockRepositoryApiMockRecorder {
	return m.recorder
}

// CreateHook mocks base method.
func (m *MockRepositoryApi) CreateHook(arg0, arg1 string, arg2 *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockRepositoryApiMockRecorder) CreateHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockRepositoryApi)(nil).CreateHook), arg0, arg1, arg2)
}

// CreateRepository mocks base method.
func (m *MockRepositoryApi) CreateRepository(arg0, arg1 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0, arg1)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockRepositoryApiMockRecorder) CreateRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRepositoryApi)(nil).CreateRepository), arg0, arg1)
}

// DownloadContents mocks base method.
func (m *MockRepositoryApi) DownloadContents(arg0, arg1, arg2, arg3 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadContents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadContents indicates an expected call of DownloadContents.
func (mr *MockRepositoryApiMockRecorder) DownloadContents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadContents", reflect.TypeOf((*MockRepositoryApi)(nil).DownloadContents), arg0, arg1, arg2, arg3)
}

// GetRepository mocks base method.
func (m *MockRepositoryApi) GetRepository(arg0, arg1 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRepositoryApiMockRecorder) GetRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRepositoryApi)(nil).GetRepository), arg0, arg1)
}

// ListHooks mocks base method.
func (m *MockRepositoryApi) ListHooks(arg0, arg1 string, arg2 *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockRepositoryApiMockRecorder) ListHooks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockRepositoryApi)(nil).ListHooks), arg0, arg1, arg2)
}
