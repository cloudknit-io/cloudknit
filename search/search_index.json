{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CloudKnit: An Open Source Solution for Managing Cloud Environments","text":"<p>CloudKnit is an open-source progressive delivery platform for managing cloud environments.</p> <p>It enables organizations to Define entire environments in a declarative way, Provision them, Detect and Reconcile Drift, and Teardown environments when no longer needed. It also comes with dashboards to help visualize environments and observe them.</p> <p>CloudKnit is based on a concept called Environment as Code. Some people have started calling it Declarative Pipelines.</p> <p>Note: We are not a big fan of using Pipeline and Declarative together as Pipeline to us means a sequence of steps which conflicts with what Declarative means.</p> <p>Environment as Code (EaC) is an abstraction over Cloud-native tools that provides a declarative way of defining an entire Environment. It has a Control Plane that manages the state of the environment, including resource dependencies, and drift detection and reconciliation.</p> <p> Diagram 1: Where does CloudKnit fit in with existing tools</p>"},{"location":"component_details_view/","title":"Component Details View","text":"<p>This view provides the following information about the selected component.</p> <ul> <li>Component Details View<ul> <li>Logs</li> <li>Detailed Cost Breakdown</li> <li>Audit View</li> <li>State File</li> </ul> </li> </ul>"},{"location":"component_details_view/#logs","title":"Logs","text":"<p>CloudKnit provides the user with two types of logs:</p> <ul> <li> <p>Concise Logs: These logs do not show any unnecessary or verbose information to the end-user.</p> </li> <li> <p>Detailed Logs: As the name suggests these logs show every bit of information emitted by CloudKnit's logging mechanism and can sometimes be useful for troubleshooting.</p> </li> </ul>"},{"location":"component_details_view/#detailed-cost-breakdown","title":"Detailed Cost Breakdown","text":"<p>This section provides a detailed breakdown of terraform resources that contribute to the total component cost.</p> <p>You can see the cost breakdown of platform-ec2 in the above image.</p>"},{"location":"component_details_view/#audit-view","title":"Audit View","text":"<p>This view contains logging information of all the runs(provision, teardown, reconcile) since the first provisioning.</p> <p>Audit Run View</p> <p></p> <p>Clicking on any of the audit rows an audit view will open where you can go through the concise logs of that particular run.</p> <p>Click here to understand how cost calculation works.</p>"},{"location":"component_details_view/#state-file","title":"State File","text":"<p>This view allows the end-user to view the state file of the selected component as shown in the above image. Also, we have two buttons in the bottom right corner which allow the end-user to download or edit the state file.</p> <p>Editing the state file</p> <p></p> <p>When you click on the edit button, the state editor view will open and CloudKnit will fetch the terraform resources. From here, a user can delete the terraform resources if required.</p>"},{"location":"errors/","title":"Errors","text":"<p>Almost all errors are logged in the concise logs section of the component details view. You can backtrack and get to the root cause of the error that happened during reconciliation.</p> <p>Usually the errors that might occur are related to:-</p> <ul> <li>AWS Secrets: When secrets are not set and one is trying to provision an environment. See secrets section to set secrets. Another reason could be while deploying a particular resource for example:-</li> </ul> <p></p> <ul> <li>Terraform configuration: Errors related to terraform usually occur because of an error in the tfvars file supplied by the user configured with an Environment yaml.</li> </ul> <p>Example:</p> <pre><code>name            = \"cust-team-env-vpc\"\ncidr            = \"10.11.0.0/16\"\nazs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\nprivate_subnets = [\"10.11.0.0/24\", \"10.11.1.0/24\", \"10.11.2.0/24\"]\npublic_subnets  = [\"10.11.200.0/24\", \"10.11.201.0/24\", \"10.11.202.0/24\"]\nenable_ipv6 = truee // Error: we added wrong value here\n\npublic_subnet_ipv6_prefixes  = [0, 1, 2]\nprivate_subnet_ipv6_prefixes = [3, 4, 5]\npublic_subnet_tags = {\n  \"kubernetes.io/role/elb\"      = 1\n}\n</code></pre> <p>The above tfvars file will error out as <code>truee</code> is not a valid value.</p> <ul> <li>Incorrect YAML:</li> <li>Formatting problem</li> <li>Wrong properties For all yaml issues a notification is shown on the UI, telling you the problem part in that yaml.</li> </ul> <p>Example</p> <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\nname: dev-checkout-sandbox\nnamespace: CloudKnit\nspec:\nteamName: checkout\nenvName: sandbox  autoApprove: true\ncomponent2: # Error Part\n- name: networking\ntype: terraform\nmodule:\nsource: aws\nname: vpc\nvariablesFile:\nsource: \"git@github.com:zl-dev-tech/checkout-team-config.git\"\npath: \"sandbox/tfvars/networking.tfvars\"\noutputs:\n- name: vpc_id\n- name: public_subnets\n- name: private_subnets\n- name: vpc_cidr_block\n</code></pre> <p></p> <p>In the above screenshot we can see that an unknown field component2 is used in the environment.spec section of the yaml, which we can see in the example.</p>"},{"location":"why_zL_bck/","title":"why zL bck","text":""},{"location":"why_zL_bck/#why-cloudknit","title":"Why CloudKnit?","text":"<p>Environment definitions and configurations should be declarative and version controlled. Environment deployment and lifecycle management should be automated, auditable, and easy to understand.</p>"},{"location":"concepts/architectural_overview/","title":"Architectural Overview","text":"<p>See below diagram with an architectural overview of CloudKnit.</p> <p></p>"},{"location":"concepts/architectural_overview/#environment-definition","title":"Environment Definition","text":"<p>It allows you to define entire Environment. We currently support easy to use YAML format for the environment definition.</p> <p>See example below: </p> Environment Definition <pre><code>apiVersion: stable.cloudknit.com/v1\nkind: Environment\nmetadata:\nname: zmart-payment-prod-blue\nnamespace: zmart-config\nspec:\nteamName: payment\nenvName: prod-blue\ncomponents:\n- name: networking\ntype: terraform\nautoApprove: true\nmodule:\nsource: git@github.com:terraform-aws-modules/terraform-aws-vpc.git\nvariablesFile:\npath: \"prod-blue/vars/networking.tfvars\"\noutputs:\n- name: vpc_id\n- name: platform-eks\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: git@github.com:terraform-aws-modules/terraform-aws-eks.git\nvariables:\n- name: vpc_id\nvalueFrom: networking.vpc_id\nvariablesFile:\npath: \"prod-blue/vars/platform-eks.tfvars\"\n- name: website\ntype: helm #Native support for helm chart coming soon\ndependsOn: [platform-eks]\nsource:\nrepo: git@github.com:helm/examples.git\npath: charts/hello-world\nvariables:\n- name: environment\nvalue: prod-blue\n</code></pre>"},{"location":"concepts/architectural_overview/#intermediate-language","title":"Intermediate Language","text":"<p>Intermediate Language consists of code generated by k8s operator based on the Environment Definition. Generated code consists of ArgoCD, Argo Workflow &amp; Terraform/Helm code.</p>"},{"location":"concepts/architectural_overview/#argocd","title":"ArgoCD","text":"<p>ArgoCD is used to watch Environment Definition &amp; Intermediate Language Github repositories. </p>"},{"location":"concepts/architectural_overview/#argo-workflow","title":"Argo Workflow","text":"<p>Argo Workflow is used to run each component of the environment in the correct order and provides features like manual approval/cost estimates etc.</p>"},{"location":"concepts/concepts/","title":"Core Concepts","text":""},{"location":"concepts/concepts/#environment","title":"Environment","text":"<p>A logical grouping of all the Infrastructure Components that are needed to run business applications. The grouping includes components like networking, platform-eks, database, s3 buckets, and any other components.</p>"},{"location":"concepts/concepts/#components","title":"Components","text":"<p>Logical groupings of 1 or more Infrastructure Resources that get provisioned together. For example, Networking is an Infrastructure Component with various Infrastructure resources like Virtual Private Cloud(VPC), Subnets, Internet Gateways, Route Tables, etc.</p>"},{"location":"concepts/concepts/#environment-as-code","title":"Environment as Code","text":"<p>Environment as Code (EaC) is an abstraction over Infrastructure as Code that provides a declarative  way of defining an entire Environment. It has a Control Plane that manages the state of the environment, including relationships between various resources, Detects Drift as well enables Reconciliation. It also supports best practices  like Loose Coupling, Idempotency, Immutability, etc. for the entire environment. EaC allows teams to deliver entire environments rapidly and reliably, at scale.</p> <p>To read more about this concept, go to From Infrastructure as Code to Environment as Code</p>"},{"location":"concepts/concepts/#gitops","title":"GitOps","text":"<p>GitOps extends Infrastructure as Code (IaC) and adds a workflow (Pull Request Process) to apply a change to the Production or any environment for that matter. It could also have a control loop that verifies periodically that the actual state of the infrastructure is the same as the desired state.</p> <pre><code>GitOps = IaC + (Workflow + Control Loop)\n</code></pre> <p>To read more about GitOps, go to Infrastructure as Code: Principles, Patterns, and Practices article &amp; checkout the GitOps section.</p>"},{"location":"concepts/glossary/","title":"Glossary","text":""},{"location":"concepts/glossary/#coming-soon","title":"COMING SOON","text":""},{"location":"define/define_environment/","title":"Define Environment","text":"<p>As the name says the <code>Define</code> step of the Environment Lifecycle allows you to define and entire entire environment. Once you create the environment definition, you will have to commit and push the changes to team repository. CloudKnit will automatically pickup the changes and provision/update/teardown the environment.</p> <p>Environment definition uses a Kubernetes Custom Resource which is in YAML format and provides a declarative way of defining an environment.</p> <p>Check the Field Reference page for information about all the fields.</p>"},{"location":"define/define_environment_backup/","title":"Define environment backup","text":""},{"location":"define/define_environment_backup/#auto-approve","title":"Auto Approve","text":"<p>When you provision or teardown an environment, the terraform plan needs to be approved. The approval step can be automated, by setting the flag to <code>true</code>. By default, this flag is set to <code>false</code>, requiring the user to manually approve.</p> <p>This property allows CloudKnit to skip the approval process.</p> <p>OPTIONAL: defaulted to false if not provided</p> <pre><code>autoApprove: true\n</code></pre>"},{"location":"define/define_environment_backup/#teardown","title":"Teardown","text":"<p>This property tells CloudKnit to destroy an environment, so if you are provisioning an environment remember to either remove it or set it to false</p> <p>OPTIONAL: default value is false</p> <p>You can find more information about teardown here.</p> <pre><code>teardown: true\n</code></pre>"},{"location":"define/define_environment_backup/#selective-reconcile","title":"Selective Reconcile (Optional)","text":"<p>This property tells CloudKnit to skip certain components based on tagName and tagValues properties.</p> <p>OPTIONAL</p> <p>You can find more information about Selective Reconcile here.</p> <p>NOTE: Works in conjunction with tags property of component.</p> <pre><code>selectiveReconcile:\ntagName: string\ntagValues: [string, string]\n</code></pre>"},{"location":"define/define_environment_backup/#spec-components","title":"Components    Usage","text":"<p>This property contains an array of components that an environment is comprised of.</p> <pre><code>components: []\n</code></pre> <p>See components section</p> <pre><code>teamName: client\nenvName: demo\nautoApprove: true\nteardown: false\n# Add if you want to skip components\nselectiveReconcile:\ntagName: string\ntagValues: [string, string]\ncomponents: []\n</code></pre>"},{"location":"define/define_environment_backup/#components","title":"Components","text":"<p>YAML Properties:-</p> <ul> <li>Name</li> <li>Type</li> <li>Destroy</li> <li>AWS Provider</li> <li>Modules</li> <li>Outputs</li> <li>Variables</li> <li>Secrets</li> <li>Overlay Data</li> <li>Overlay Files</li> <li>Depends On</li> <li>autoApprove (at component level)</li> </ul> <p>This is the most intimidating part of your environment yaml file. Let's decipher it step by step.</p>"},{"location":"define/define_environment_backup/#component-name","title":"Name","text":"<p>Name of the environment component</p> <pre><code>name: static-assets\n</code></pre>"},{"location":"define/define_environment_backup/#component-type","title":"Type","text":"<p>Terraform is currently the only supported type</p> <pre><code>type: terraform\n</code></pre>"},{"location":"define/define_environment_backup/#component-destroy","title":"Destroy","text":"<p>This property is used to override the <code>teardown</code> property of spec, which applies to all components in the Environment file. It will override the <code>teardown</code> value for the component it is applied to.</p> <p>NOTE: This property overrides the teardown property at the spec level, which means that if teardown is false and destroy is true, the current component gets destroyed.</p> <p>OPTIONAL: Default value is false.</p> <p>You can find more information about teardown here</p> <pre><code>destroy: false\n</code></pre>"},{"location":"define/define_environment_backup/#component-aws-provider","title":"AWS Provider (Optional)","text":"<p>Below is an example portraying how to add an aws provider configuration to a component.</p> <pre><code># OPTIONAL: Configuration block for AWS provider\naws:\n# OPTIONAL: AWS region\nregion: us-east-1\n# OPTIONAL: Configuration block for AWS Assume Role\nassumeRole:\n# Role ARN which to assume\nroleArn: arn:aws:iam::account-id:role/zl-allow-assume-networking\n# OPTIONAL: External ID\nexternalId: test_id1\n# OPTIONAL: Session Name\nsessionName: some_session\n</code></pre>"},{"location":"define/define_environment_backup/#component-modules","title":"Modules","text":"<ul> <li>Public Module</li> <li> <p>Private Module </p> </li> <li> <p></p> </li> <li> <p>Path (Optional)     If the actual module is in a subdirectory (MonoRepo with multiple terraform modules), use <code>path</code> to specify the module</p> <pre><code>path: path/to/module\n</code></pre> </li> </ul> Usage <pre><code>module:\nsource: aws\nname: s3-bucket\npath: path/to/module\n</code></pre> <ul> <li> <p></p> <pre><code>  module:\nsource: \"git@github.com:SebastianUA/terraform-aws-sagemaker\"\n</code></pre> </li> </ul>"},{"location":"define/define_environment_backup/#public-module","title":"Public Module","text":"Currently only AWS modules are supported, which one can reference from https://registry.terraform.io/modules/terraform-aws-modules/s3-bucket/aws/latest"},{"location":"define/define_environment_backup/#private-module","title":"Private ModuleUsage","text":"For private modules you need to specify full path to the terraform module."},{"location":"define/define_environment_backup/#component-tags","title":"Tags (Optional)","text":"<p>Adds additional information to the component.</p> <p>Required: When we are using selectiveReconcile to skip components</p> <p>name: For selective reconcile to work this needs to be the same value used in tagName property of selectiveReconcile</p> <p>value: Value of the tag.</p> Usage <pre><code>tags:\n- name: helloWorldComponentType # for selective reconcile to work this needs to be the same value used in tagName property of selectiveReconcile\nvalue: data\n- name: cloudProvider\nvalue: aws\n</code></pre>"},{"location":"define/define_environment_backup/#component-outputs","title":"Outputs","text":"<p>If the module supports outputs, name them here so they can be later referenced in <code>variables</code> block using <code>valueFrom</code></p> Usage <pre><code>outputs:\n- name: bucket_arn\n</code></pre>"},{"location":"define/define_environment_backup/#component-variables","title":"Variables (Optional)","text":"<pre><code>variables: []\n</code></pre> <p>Inline variables (will get injected into the terraform module when TF code is generated). This array is a combination of <code>name</code> and <code>value</code> or <code>valueFrom</code>.</p> <p></p> <ul> <li> <p>Value: String type.</p> </li> <li> <p>ValueFrom: reference an output defined in a previous module using <code>outputs</code> block</p> </li> </ul> Usage <pre><code>variables:\n- name: bucket\nvalue: \"org-tech-client-demo-static-assets\"\n- name: acl\nvalueFrom: s3-common.bucket_acl\n</code></pre>"},{"location":"define/define_environment_backup/#component-secrets","title":"Secrets (Optional)","text":"<pre><code>secrets: []\n</code></pre> <p>References secret values which are added through the CloudKnit UI.</p> <p>See Secrets Section.</p> <p></p> <ul> <li>Name: Name of the terraform module variable.</li> <li>Key: Secret name entered in CloudKnit UI settings page.</li> <li> <p>Scope: Scope configures secret scope granularity.</p> </li> <li> <p>Org</p> </li> <li>Team</li> <li>Environment</li> </ul> Usage <pre><code>secrets:\n- name: bucket\nkey: s3-name\nscope: org\n</code></pre>"},{"location":"define/define_environment_backup/#component-overlay-data","title":"Overlay Data (Optional)","text":"<pre><code>overlayData: []\n</code></pre> <p>Array of files to be generated and bundled with the environment component.</p> <ul> <li>Name: Name of the file.</li> <li>Data: Content of the file (generally it is a multi-line string).</li> </ul> Usage <pre><code>overlayData:\n- name: cloud-init.sh\ndata: |\n#!/bin/sh\necho \"Starting cloud init\"\n</code></pre>"},{"location":"define/define_environment_backup/#component-overlay-files","title":"Overlay Files (Optional)","text":"<pre><code>overlayFiles: []\n</code></pre> <p>Array of external files which will be bundled with the environment component</p> <ul> <li>Source: Repo where the file is located.</li> <li>Paths (array): Paths to files in the <code>source</code> repo. Types of paths:-</li> <li>Directory</li> <li>Individual Overlay Files</li> <li>Ref (Optional): Reference to the branch, commit, head etc from where we will pull the file.</li> </ul> Usage <pre><code>overlayFiles:\n- source: \"git@github.com:org-tech/client-config.git\"\npaths:\n- demo/files/\n- demo/overlay.txt\n- demo/overlay2.txt\nref: HEAD\n</code></pre>"},{"location":"define/define_environment_backup/#component-depends-on","title":"Depends On","text":"<pre><code>dependsOn: []\n</code></pre> <p>Add module dependencies (array of environment component names), which are to be resolved before the current component is processed.</p> <p>Array includes name property of the component.</p> Usage <pre><code>dependsOn: [networking]\n</code></pre>"},{"location":"define/define_environment_backup/#examples","title":"Examples","text":"<pre><code>- name: networking\ntype: terraform\nmodule:\nsource: aws\nname: vpc\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/networking.tfvars\"\n# if the module supports outputs, name them here so they can be later referenced in `variables` block using `valueFrom`\noutputs:\n- name: private_subnets\n</code></pre> <pre><code>- name: platform-eks\ntype: terraform\n# add module dependencies (array of environment component names)\ndependsOn: [networking]\nmodule:\nsource: aws\nname: s3-bucket\n# instead of inline variables, pass a tfvars file\nvariablesFile:\n# repo where the file belongs\nsource: \"git@github.com:org-tech/client-config.git\"\n# path to the file in the `source` repo\npath: \"demo/tfvars/platform-eks.tfvars\"\n</code></pre> <pre><code>- name: eks-addons\ntype: terraform\ndependsOn: [platform-eks]\nmodule:\nsource: aws\nname: s3-bucket\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/eks-addons.tfvars\"\n</code></pre> <pre><code>- name: platform-ec2\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: ec2-instance\n# example of using both inline variables and tfvars file\nvariables:\n- name: subnet_id\n# example of how to fetch a variable from `outputs`\nvalueFrom: networking.private_subnets[0]\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/ec2.tfvars\"\n</code></pre> <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\nname: org-tech-client-demo\nnamespace: CloudKnit\nspec:\nteamName: client\nenvName: demo\n# Use it to skip some components\nselectiveReconcile:\ntagName: string\ntagValues: [string, string]\ncomponents:\n- name: static-assets\ntype: terraform\ntags:\n- name: helloWorldComponentType # for selective reconcile to work this needs to be the same value used in tagName property of selectiveReconcile\nvalue: data\n- name: cloudProvider\nvalue: aws\naws:\nregion: us-east-1\nassumeRole:\nroleArn: arn:aws:iam::account-id:role/zl-allow-assume-networking\nexternalId: test_id1\nsessionName: some_session\nmodule:\nsource: aws\nname: s3-bucket\npath: path/to/module\noutputs:\n- name: bucket_arn\nvariables:\n- name: bucket\nvalue: \"org-tech-client-demo-static-assets\"\n- name: acl\nvalueFrom: s3-bucket.bucket_arn\nsecrets:\n- name: bucket\nkey: s3-name\nscope: org\noverlayData:\n- name: cloud-init.sh\ndata: |\n#!/bin/sh\necho \"Starting cloud init\"\noverlayFiles:\n- source: \"git@github.com:org-tech/client-config.git\"\npaths:\n- demo/files/\n- demo/overlay.txt\n- demo/overlay2.txt\nref: HEAD\n- name: networking\ntype: terraform\nmodule:\nsource: aws\nname: vpc\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/networking.tfvars\"\noutputs:\n- name: private_subnets\n- name: platform-eks\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: s3-bucket\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/platform-eks.tfvars\"\n- name: eks-addons\ntype: terraform\ndependsOn: [platform-eks]\nmodule:\nsource: aws\nname: s3-bucket\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/eks-addons.tfvars\"\n- name: platform-ec2\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: ec2-instance\nvariables:\n- name: subnet_id\nvalueFrom: networking.private_subnets[0]\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/ec2.tfvars\"\n</code></pre>"},{"location":"define/define_environment_backup/#networking","title":"networking","text":""},{"location":"define/define_environment_backup/#platform-eks","title":"platform-eks","text":""},{"location":"define/define_environment_backup/#eks-addons","title":"eks-addons","text":""},{"location":"define/define_environment_backup/#platform-ec2","title":"platform-ec2","text":""},{"location":"define/define_environment_backup/#full-fledged-yaml","title":"Full Fledged Yaml","text":""},{"location":"define/examples/","title":"Example YAMLs","text":"<p>See below some examples of Environment YAML.</p> Environment YAML with tfvars file <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\nname: dev-zmart-checkout-staging\nnamespace: zmart-config\nspec:\nteamName: checkout\nenvName: staging\ncomponents:\n- name: networking\ntype: terraform\nmodule:\nsource: aws\nname: vpc\nvariablesFile:\nsource: \"https://github.com/zl-zmart-tech/checkout-team-config.git\"\npath: \"staging/tfvars/networking.tfvars\"\noutputs:\n- name: private_subnets\n- name: platform-ec2\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: ec2-instance\nvariables:\n- name: subnet_id\nvalueFrom: networking.private_subnets[0]\nvariablesFile:\nsource: \"https://github.com/zl-zmart-tech/checkout-team-config.git\"\npath: \"staging/tfvars/ec2.tfvars\"\n</code></pre> Networking tfvars file <pre><code>name            = \"dev-zmart-checkout-staging-vpc\"\ncidr            = \"10.12.0.0/16\"\nazs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\nprivate_subnets = [\"10.12.0.0/19\", \"10.12.64.0/19\", \"10.12.128.0/19\"]\npublic_subnets  = [\"10.12.48.0/20\", \"10.12.112.0/20\", \"10.12.176.0/20\"]\nenable_nat_gateway                          = true\nsingle_nat_gateway                          = true\nenable_dns_hostnames                        = true\ntags = {\nTerraform                                 = \"true\"\nEnvironment                               = \"dev-zmart\"\n\"kubernetes.io/cluster/dev-checkout-staging-eks\"           = \"shared\"\n}\npublic_subnet_tags = {\nTerraform                                 = \"true\"\nEnvironment                               = \"dev-zmart\"\n\"kubernetes.io/cluster/dev-checkout-staging-eks\"           = \"shared\"\n\"kubernetes.io/role/elb\"                  = 1\n}\nprivate_subnet_tags = {\nTerraform                                 = \"true\"\nEnvironment                               = \"dev-zmart\"\n\"kubernetes.io/cluster/dev-checkout-staging-eks\"           = \"shared\"\n\"kubernetes.io/role/internal-elb\"         = 1\n}\ndatabase_subnet_tags = {\nTerraform                                 = \"true\"\nEnvironment                               = \"dev-zmart\"\n}\n</code></pre> EC2 tfvars file <pre><code>name            = \"dev-zlab-checkout-staging-platform-ec2\"\nami             = \"ami-06aac012759a08cec\"\ninstance_type   = \"t3.medium\"\n</code></pre>"},{"location":"define/field_reference/","title":"Field Reference","text":"<p>An environment YAML allows you to provide all the details of an environment.</p>"},{"location":"define/field_reference/#sections","title":"Sections","text":"<p>It has following main sections:</p>"},{"location":"define/field_reference/#fields","title":"Fields","text":"<p>Since Environment definition uses a Kubernetes Custom Resource the top section of the definition in YAML needs to follow its convention.</p> Field Name Field Type Description <code>apiVersion</code> <code>string</code> Custom Resource Header. Value needs to be <code>stable.cloudknit.io/v1</code> <code>kind</code> <code>string</code> Custom Resource Header. Value needs to be <code>Environment</code> <code>metadata</code> <code>Metadata</code> Metadata about the Environment <code>spec</code> <code>spec</code> Details about the Environment"},{"location":"define/field_reference/#custom-resource-header","title":"Custom Resource Header","text":"<pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\n</code></pre>"},{"location":"define/field_reference/#metadata","title":"Metadata","text":""},{"location":"define/field_reference/#fields_1","title":"Fields","text":"Field Name Field Type Description <code>name</code> <code>string</code> The name should be unique for every environment. To ensure that we follow below naming convention:-  <code>{company}-{team}-{environment}</code> company is your company's name. team and environment are defined in the spec section below <code>namespace</code> <code>string</code> Namespace should be <code>{company}-config</code>"},{"location":"define/field_reference/#metadata-example","title":"Example","text":""},{"location":"define/field_reference/#metadata-name-zmart-checkout-dev-namespace-zmart-config","title":"<pre><code>metadata:\n  name: zmart-checkout-dev\n  namespace: zmart-config\n</code></pre>","text":""},{"location":"define/field_reference/#spec","title":"Spec","text":"<p>Spec contains details of the environment to be provisioned.</p>"},{"location":"define/field_reference/#fields_2","title":"Fields","text":"Field Name Field Type Description <code>teamName</code> <code>string</code> Name of the team to which this environment belongs <code>envName</code> <code>string</code> Name of the environment <code>autoApprove</code> <code>boolean</code> To skip the manual approval step of applying the changes to a workflow, set this flag to <code>true</code>. Default value is <code>false</code>. More info here <code>teardown</code> <code>boolean</code> To teardown an environment, set this flag to <code>true</code>. Default value is <code>false</code>. More info here <code>selectiveReconcile</code> <code>array</code> More info here <code>components</code> <code>array</code> Array of environment components"},{"location":"define/field_reference/#metadata-example","title":"Example","text":""},{"location":"define/field_reference/#spec-teamname-checkout-envname-demo","title":"<pre><code>spec:\n  teamName: checkout\n  envName: demo\n</code></pre>","text":""},{"location":"define/field_reference/#components","title":"Components","text":"<p>Array of environment components.</p>"},{"location":"define/field_reference/#fields_3","title":"Fields","text":"Field Name Field Type Description <code>name</code> <code>string</code> Name of the environment component <code>type</code> <code>string</code> <code>terraform</code> is currently the only supported type <code>destroy</code> <code>boolean</code> Optional field. Flag for destroying a component. Default is <code>false</code>. More info here <code>destroyProtection</code> <code>boolean</code> Optional field. If set to <code>true</code>, CloudKnit will not destroy this component (default is <code>false</code>) <code>dependsOn</code> <code>array</code> Optional field. Array of environment component names, which this module depends on <code>secrets</code> This section references the secret values which are input through the CloudKnit UI <code>tags</code> Tags are labels attached to components for the purpose of identification. It is an <code>array</code> of <code>string</code> <code>variables</code> Inline variables, these will get injected into the terraform module when TF code is generated. <code>array</code> of <code>name -&gt; value</code> objects <code>variablesFile</code> <code>string</code> Variables can also be passed from an output defined in a previous module using <code>outputs</code> block, via a tfvars file <code>module</code> <code>string</code> Modules are containers for multiple resources that are used together. You can either reference a public or private module. <code>outputs</code> <code>string</code> Output values make information about your infrastructure available on the command line, and can expose information for other components to use. Output values are similar to return values in programming languages. If the module supports outputs, name them here so they can be referenced in <code>variables</code> block using <code>valueFrom</code> <code>overlayFiles</code> A file that contains additional information about the current items. By using an overlay file, the metadata of these items can be extended. <code>overlayData</code> Rather than have information pointing to the file with overlay information, you can also specify the data."},{"location":"define/field_reference/#selective-reconcile","title":"Selective Reconcile","text":"Field Name Field Type Description <code>skipMode</code> <code>boolean</code> Flag indicating if the tags mentioned for selective reconcile are to skip reconciliation. By default this is set to <code>false</code>. If you wish to skip reconciling some components, then set it to <code>true</code> and tag the components appropriately <code>tagName</code> <code>string</code> Required, if using <code>selectiveReconcile</code> <code>tagValues</code> <code>array</code> of <code>string</code> Required, if using <code>selectiveReconcile</code>"},{"location":"define/field_reference/#aws","title":"AWS","text":"Field Name Field Type Description <code>aws</code> Optional field. Configuration block for AWS provider. More info coming soon"},{"location":"define/field_reference/#secrets","title":"Secrets","text":"Field Name Field Type Description <code>secrets</code> This section references the secret values which are input through the CloudKnit UI <code>name</code> <code>string</code> Name of the terraform module variable <code>key</code> <code>string</code> Secret name entered in CloudKnit UI settings page <code>scope</code> <code>string</code> Refers to what scope the secret is valid in. Valid scopes are <code>org</code>, <code>team</code> and <code>environment</code>"},{"location":"define/field_reference/#tags","title":"Tags","text":"Field Name Field Type Description <code>tags</code> Tags are labels attached to components for the purpose of identification. It is an <code>array</code> of <code>string</code> <code>name</code> <code>string</code> Type of tag <code>value</code> <code>string</code> Identifying tags"},{"location":"define/field_reference/#variables","title":"Variables","text":""},{"location":"define/field_reference/#inline-variables","title":"Inline Variables","text":"Field Name Field Type Description <code>variables</code> Inline variables, these will get injected into the terraform module when TF code is generated. <code>array</code> of <code>name -&gt; value</code> objects <code>name</code> <code>string</code> Name of the variable <code>value</code> <code>string</code> Value of the variable <code>valueFrom</code> <code>string</code>"},{"location":"define/field_reference/#variables-from-a-file","title":"Variables from a file","text":"Field Name Field Type Description <code>variablesFile</code> <code>string</code> Variables can also be passed from an output defined in a previous module using <code>outputs</code> block, via a tfvars file <code>path</code> <code>string</code> Required field, if using <code>variablesFile</code>. Path to the file in the <code>source</code> repo. <code>ref</code> <code>string</code> No description available <code>source</code> <code>string</code> Required field, if using <code>variablesFile</code>. Repo where the variables file can be found."},{"location":"define/field_reference/#module","title":"Module","text":"Field Name Field Type Description <code>name</code> <code>string</code> Public terraform modules can be referenced here. For private module, specify the full path <code>path</code> <code>string</code> If the module is in a subdirectory (monorepo with multiple terraform modules), use this to specify the <code>path</code> <code>source</code> <code>string</code> Required field. Currently <code>aws</code> is the only supported type <code>version</code> <code>string</code> No description available"},{"location":"define/field_reference/#outputs","title":"Outputs","text":"Field Name Field Type Description <code>name</code> <code>string</code> Required field, if using <code>outputs</code> <code>sensitive</code> <code>boolean</code> Optional field. Flag to indicate if the <code>output</code> is of sensitive nature. By default the value is set to <code>false</code>. To not display it in plaintext, set it to <code>true</code>"},{"location":"define/field_reference/#overlay-files","title":"Overlay Files","text":"Field Name Field Type Description <code>source</code> <code>array</code> of <code>string</code> Required field, if using <code>overlayFiles</code>. Repo where the file is located <code>path</code> <code>array</code> of <code>string</code> Required field, if using <code>overlayFiles</code>. Path to the file in the <code>source</code> repo <code>ref</code> No description available"},{"location":"define/field_reference/#overlay-data","title":"Overlay Data","text":"Field Name Field Type Description <code>data</code> <code>string</code> Required field, if using <code>overlayData</code>. Content of the file (generally it is a multi-line string) <code>name</code> <code>string</code> Required field, if using <code>overlayData</code>. Name of the file, containing the afore specified data"},{"location":"define/quick-start-define-environment/","title":"Environment YAML","text":"<p>An environment YAML is the starting point when provisioning the environment, it provides CloudKnit the meta information required to create and deploy the components, modules, etc.</p> <ul> <li>Environment YAML<ul> <li>Metdata</li> <li>Spec</li> <li>Components</li> <li>Examples</li> </ul> </li> </ul> <p>Our YAML file always starts with following yaml:</p> <p>with <code>kind</code> property being <code>environment</code>, and for now <code>apiVersion</code> is always <code>stable.cloudknit.io/v1</code></p> <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\n</code></pre>"},{"location":"define/quick-start-define-environment/#metdata","title":"Metdata","text":"<ul> <li>Name</li> <li>Namespace</li> <li>Usage</li> </ul>    Overview  <p>Metadata propery contains the <code>name</code> of your <code>environment</code> along with the <code>namespace</code> property which for now is always <code>CloudKnit</code></p>"},{"location":"define/quick-start-define-environment/#metadata-name","title":"Name Property","text":"<p>The name property should be unique for every environment, to mantain that we follow following naming convention:-</p> <p><code>{orgName}-{teamName}-{environmentName}</code></p> <p>orgName is your organisation's name. teamName and environmentName are provided in the spec scope.</p> <pre><code>name: orgtech-client-demo\n</code></pre>"},{"location":"define/quick-start-define-environment/#metadata-namespace","title":"Namespace Property","text":"<p>Namespace is always <code>CloudKnit</code> for every yaml you create.</p> <pre><code>namespace: CloudKnit\n</code></pre>"},{"location":"define/quick-start-define-environment/#metadata-usage","title":"Usage","text":"<pre><code>metadata:\n# Environment CRD k8s object name\nname: orgtech-client-demo\n# namespace is `CloudKnit` for every yaml you create\nnamespace: CloudKnit\n</code></pre>"},{"location":"define/quick-start-define-environment/#spec","title":"Spec","text":"<ul> <li>Team Name</li> <li>Environment Name</li> <li>Auto Approve</li> <li>Teardown</li> <li>Selective Reconcile</li> <li>Components</li> </ul>    Overview  <p>Spec contains the information about HOW to provision an environment.</p>"},{"location":"define/quick-start-define-environment/#team-name","title":"Team Name","text":"<p>Name of the team CRD to which this environment belongs to (also used to create metadata.name)</p> <pre><code>teamName: client\n</code></pre>"},{"location":"define/quick-start-define-environment/#environment-name","title":"Environment Name","text":"<p>Name of the environment (used to create metadata.name)</p> <pre><code>envName: demo\n</code></pre>"},{"location":"define/quick-start-define-environment/#auto-approve","title":"Auto Approve","text":"<p>When we provision or destroy an environment, by default, CloudKnit UI always asks for approval from the end-user.</p> <p>This property allows CloudKnit to skip the approval process.</p> <p>OPTIONAL: defaulted to false if not provided</p> <pre><code>autoApprove: true\n</code></pre>"},{"location":"define/quick-start-define-environment/#teardown","title":"Teardown","text":"<p>This property tells CloudKnit to destroy an environment, so if you are provisioning an environment remember to either remove it or set it to false</p> <p>OPTIONAL: default value is false</p> <p>You can find more information about teardown here.</p> <pre><code>teardown: true\n</code></pre>"},{"location":"define/quick-start-define-environment/#selective-reconcile","title":"Selective Reconcile (Optional)","text":"<p>This property tells CloudKnit to skip certain components based on tagName and tagValues properties.</p> <p>OPTIONAL</p> <p>You can find more information about Selective Reconcile here.</p> <p>NOTE: Works in conjunction with tags property of component.</p> <pre><code>selectiveReconcile:\ntagName: string\ntagValues: [string, string]\n</code></pre>"},{"location":"define/quick-start-define-environment/#spec-components","title":"Components    Usage","text":"<p>This property contains an array of components that an environment is comprised of.</p> <pre><code>components: []\n</code></pre> <p>See components section</p> <pre><code>teamName: client\nenvName: demo\nautoApprove: true\nteardown: false\n# Add if you want to skip components\nselectiveReconcile:\ntagName: string\ntagValues: [string, string]\ncomponents: []\n</code></pre>"},{"location":"define/quick-start-define-environment/#components","title":"Components","text":"<p>YAML Properties:-</p> <ul> <li>Name</li> <li>Type</li> <li>Destroy</li> <li>AWS Provider</li> <li>Modules</li> <li>Outputs</li> <li>Variables</li> <li>Secrets</li> <li>Overlay Data</li> <li>Overlay Files</li> <li>Depends On</li> </ul> <p>This is the most intimidating part of your environment yaml file. Let's decipher it step by step.</p>"},{"location":"define/quick-start-define-environment/#component-name","title":"Name","text":"<p>Name of the environment component</p> <pre><code>name: static-assets\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-type","title":"Type","text":"<p>Terraform is currently the only supported type</p> <pre><code>type: terraform\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-destroy","title":"Destroy","text":"<p>This property is similar to <code>teardown</code> property of spec scope, the only difference being, it applies on environment component level.</p> <p>NOTE: This property overrides the teardown property at the spec level, which means that if teardown is false and destroy is true, the current component gets destroyed.</p> <p>OPTIONAL: Default value is false.</p> <p>You can find more information about teardown here</p> <pre><code>destroy: false\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-aws-provider","title":"AWS Provider (Optional)","text":"<p>Below is an example portraying how to add an aws provider configuration to a component.</p> <pre><code># OPTIONAL: Configuration block for AWS provider\naws:\n# OPTIONAL: AWS region\nregion: us-east-1\n# OPTIONAL: Configuration block for AWS Assume Role\nassumeRole:\n# Role ARN which to assume\nroleArn: arn:aws:iam::account-id:role/zl-allow-assume-networking\n# OPTIONAL: External ID\nexternalId: test_id1\n# OPTIONAL: Session Name\nsessionName: some_session\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-modules","title":"Modules","text":"<ul> <li>Public Module</li> <li> <p>Private Module </p> </li> <li> <p></p> </li> <li> <p>Path (Optional)     If the actual module is in a subdirectory (MonoRepo with multiple terraform modules), use <code>path</code> to specify the module</p> <pre><code>path: path/to/module\n</code></pre> </li> </ul> Usage <pre><code>module:\nsource: aws\nname: s3-bucket\npath: path/to/module\n</code></pre> <ul> <li> <p></p> <pre><code>  module:\nsource: \"git@github.com:SebastianUA/terraform-aws-sagemaker\"\n</code></pre> </li> </ul>"},{"location":"define/quick-start-define-environment/#public-module","title":"Public Module","text":"Currently only AWS modules are supported, which one can reference from https://registry.terraform.io/modules/terraform-aws-modules/s3-bucket/aws/latest"},{"location":"define/quick-start-define-environment/#private-module","title":"Private ModuleUsage","text":"For private modules you need to specify full path to the terraform module."},{"location":"define/quick-start-define-environment/#component-tags","title":"Tags (Optional)","text":"<p>Adds additional information to the component.</p> <p>Required: When we are using selectiveReconcile to skip components</p> <p>name: For selective reconcile to work this needs to be the same value used in tagName property of selectiveReconcile</p> <p>value: Value of the tag.</p> Usage <pre><code>tags:\n- name: helloWorldComponentType # for selective reconcile to work this needs to be the same value used in tagName property of selectiveReconcile\nvalue: data\n- name: cloudProvider\nvalue: aws\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-outputs","title":"Outputs","text":"<p>If the module supports outputs, name them here so they can be later referenced in <code>variables</code> block using <code>valueFrom</code></p> Usage <pre><code>outputs:\n- name: bucket_arn\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-variables","title":"Variables (Optional)","text":"<pre><code>variables: []\n</code></pre> <p>Inline variables (will get injected into the terraform module when TF code is generated). This array is a combination of <code>name</code> and <code>value</code> or <code>valueFrom</code>.</p> <p></p> <ul> <li> <p>Value: String type.</p> </li> <li> <p>ValueFrom: reference an output defined in a previous module using <code>outputs</code> block</p> </li> </ul> Usage <pre><code>variables:\n- name: bucket\nvalue: \"org-tech-client-demo-static-assets\"\n- name: acl\nvalueFrom: s3-common.bucket_acl\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-secrets","title":"Secrets (Optional)","text":"<pre><code>secrets: []\n</code></pre> <p>References secret values which are added through the CloudKnit UI.</p> <p>See Secrets Section.</p> <p></p> <ul> <li>Name: Name of the terraform module variable.</li> <li>Key: Secret name entered in CloudKnit UI settings page.</li> <li> <p>Scope: Scope configures secret scope granularity.</p> </li> <li> <p>Org</p> </li> <li>Team</li> <li>Environment</li> </ul> Usage <pre><code>secrets:\n- name: bucket\nkey: s3-name\nscope: org\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-overlay-data","title":"Overlay Data (Optional)","text":"<pre><code>overlayData: []\n</code></pre> <p>Array of files to be generated and bundled with the environment component.</p> <ul> <li>Name: Name of the file.</li> <li>Data: Content of the file (generally it is a multi-line string).</li> </ul> Usage <pre><code>overlayData:\n- name: cloud-init.sh\ndata: |\n#!/bin/sh\necho \"Starting cloud init\"\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-overlay-files","title":"Overlay Files (Optional)","text":"<pre><code>overlayFiles: []\n</code></pre> <p>Array of external files which will be bundled with the environment component</p> <ul> <li>Source: Repo where the file is located.</li> <li>Paths (array): Paths to files in the <code>source</code> repo. Types of paths:-</li> <li>Directory</li> <li>Individual Overlay Files</li> <li>Ref (Optional): Reference to the branch, commit, head etc from where we will pull the file.</li> </ul> Usage <pre><code>overlayFiles:\n- source: \"git@github.com:org-tech/client-config.git\"\npaths:\n- demo/files/\n- demo/overlay.txt\n- demo/overlay2.txt\nref: HEAD\n</code></pre>"},{"location":"define/quick-start-define-environment/#component-depends-on","title":"Depends On","text":"<pre><code>dependsOn: []\n</code></pre> <p>Add module dependencies (array of environment component names), which are to be resolved before the current component is processed.</p> <p>Array includes name property of the component.</p> Usage <pre><code>dependsOn: [networking]\n</code></pre>"},{"location":"define/quick-start-define-environment/#examples","title":"Examples","text":"<pre><code>- name: networking\ntype: terraform\nmodule:\nsource: aws\nname: vpc\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/networking.tfvars\"\n# if the module supports outputs, name them here so they can be later referenced in `variables` block using `valueFrom`\noutputs:\n- name: private_subnets\n</code></pre> <pre><code>- name: platform-eks\ntype: terraform\n# add module dependencies (array of environment component names)\ndependsOn: [networking]\nmodule:\nsource: aws\nname: s3-bucket\n# instead of inline variables, pass a tfvars file\nvariablesFile:\n# repo where the file belongs\nsource: \"git@github.com:org-tech/client-config.git\"\n# path to the file in the `source` repo\npath: \"demo/tfvars/platform-eks.tfvars\"\n</code></pre> <pre><code>- name: eks-addons\ntype: terraform\ndependsOn: [platform-eks]\nmodule:\nsource: aws\nname: s3-bucket\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/eks-addons.tfvars\"\n</code></pre> <pre><code>- name: platform-ec2\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: ec2-instance\n# example of using both inline variables and tfvars file\nvariables:\n- name: subnet_id\n# example of how to fetch a variable from `outputs`\nvalueFrom: networking.private_subnets[0]\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/ec2.tfvars\"\n</code></pre> <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\nname: org-tech-client-demo\nnamespace: CloudKnit\nspec:\nteamName: client\nenvName: demo\n# Use it to skip some components\nselectiveReconcile:\ntagName: string\ntagValues: [string, string]\ncomponents:\n- name: static-assets\ntype: terraform\ntags:\n- name: helloWorldComponentType # for selective reconcile to work this needs to be the same value used in tagName property of selectiveReconcile\nvalue: data\n- name: cloudProvider\nvalue: aws\naws:\nregion: us-east-1\nassumeRole:\nroleArn: arn:aws:iam::account-id:role/zl-allow-assume-networking\nexternalId: test_id1\nsessionName: some_session\nmodule:\nsource: aws\nname: s3-bucket\npath: path/to/module\noutputs:\n- name: bucket_arn\nvariables:\n- name: bucket\nvalue: \"org-tech-client-demo-static-assets\"\n- name: acl\nvalueFrom: s3-bucket.bucket_arn\nsecrets:\n- name: bucket\nkey: s3-name\nscope: org\noverlayData:\n- name: cloud-init.sh\ndata: |\n#!/bin/sh\necho \"Starting cloud init\"\noverlayFiles:\n- source: \"git@github.com:org-tech/client-config.git\"\npaths:\n- demo/files/\n- demo/overlay.txt\n- demo/overlay2.txt\nref: HEAD\n- name: networking\ntype: terraform\nmodule:\nsource: aws\nname: vpc\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/networking.tfvars\"\noutputs:\n- name: private_subnets\n- name: platform-eks\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: s3-bucket\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/platform-eks.tfvars\"\n- name: eks-addons\ntype: terraform\ndependsOn: [platform-eks]\nmodule:\nsource: aws\nname: s3-bucket\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/eks-addons.tfvars\"\n- name: platform-ec2\ntype: terraform\ndependsOn: [networking]\nmodule:\nsource: aws\nname: ec2-instance\nvariables:\n- name: subnet_id\nvalueFrom: networking.private_subnets[0]\nvariablesFile:\nsource: \"git@github.com:org-tech/client-config.git\"\npath: \"demo/tfvars/ec2.tfvars\"\n</code></pre>"},{"location":"define/quick-start-define-environment/#networking","title":"networking","text":""},{"location":"define/quick-start-define-environment/#platform-eks","title":"platform-eks","text":""},{"location":"define/quick-start-define-environment/#eks-addons","title":"eks-addons","text":""},{"location":"define/quick-start-define-environment/#platform-ec2","title":"platform-ec2","text":""},{"location":"define/quick-start-define-environment/#full-fledged-yaml","title":"Full Fledged Yaml","text":""},{"location":"getting_started/hello_world/","title":"Hello, World! Environment","text":"<p>Make sure you've completed configuring AWS Credentials and onboarded a team before starting this walkthrough. 1. Create a <code>hello-world</code> directory in the cloned repo 1. Clone the team repo (<code>zl-[team-name]-config</code>) you created in onboarding a team <pre><code>cd zl-[team-name]-config\nmkdir hello-world\ncd hello-world\n</code></pre> 1. Run the below bash script using terminal and enter <code>Company</code>, <code>Team</code> and <code>Environment</code> Names when asked.   <pre><code>bash &lt;(curl -s https://docs.cloudknit.io/scripts/getting_started.sh)\n</code></pre> 1. It will create the following <code>hello-world.yaml</code>:  Click to expand! <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\nname: company-hello-world\nnamespace: company-config\nspec:\nteamName: your-team\nenvName: hello-world\ncomponents:\n- name: images\ntype: terraform\nmodule:\nsource: aws\nname: s3-bucket\nvariables:\n- name: bucket\nvalue: \"company-hello-world-images-abcde\"\n- name: videos\ntype: terraform\ndependsOn: [images]\nmodule:\nsource: aws\nname: s3-bucket\nvariables:\n- name: bucket\nvalue: \"company-hello-world-videos-vwxyz\"\n</code></pre> </p> <ol> <li>Commit the changes and push to Github</li> <li>Go to Environments page on CloudKnit UI<ul> <li>After a few minutes you should see your new environment</li> <li>It will provision the <code>images</code> s3 bucket first, then <code>videos</code> s3 bucket</li> </ul> </li> <li>Once it starts provisioning, click on the <code>images</code> component</li> <li>You should see the provision plan in the right panel</li> <li>Once the plan finishes you need to approve the changes by clicking <code>Approve</code> below the terraform plan (as shown in the image below)</li> <li>This will start provisoning the <code>images</code> s3 bucket (which is terraform apply)</li> </ol> <p></p>"},{"location":"getting_started/hello_world/#teardown-your-first-environment","title":"Teardown your first Environment","text":"<p>After you have provisioned your first environment, let's go through the teardown exercise.</p> <p>You can read more about <code>teardown</code> here.</p> <ol> <li> <p>Add <code>teardown: true</code> in <code>hello-world.yaml</code> at the <code>spec</code> level. See example below:  Click to expand! <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\nname: zmart-hello-world\nnamespace: zmart-config\nspec:\nteamName: your-team\nenvName: hello-world\nteardown: true # Add this\ncomponents:\n- name: images\ntype: terraform\nmodule:\nsource: aws\nname: s3-bucket\nvariables:\n- name: bucket\nvalue: \"zmart-hello-world-images-abcde\"\n- name: videos\ntype: terraform\ndependsOn: [images]\nmodule:\nsource: aws\nname: s3-bucket\nvariables:\n- name: bucket\nvalue: \"zmart-hello-world-videos-vwxyz\"\n</code></pre> </p> </li> <li> <p>Commit and push changes to Github</p> <ul> <li>The teardown will start at the bottom most leaf node</li> </ul> </li> <li>Approve the teardown plan when prompted</li> <li>Monitor the progress on CloudKnit UI</li> </ol>"},{"location":"getting_started/install_github_app/","title":"Configuring Github App","text":"<p>Setting up the CloudKnit Github App is required for adding a new Team repository.</p>"},{"location":"getting_started/install_github_app/#sign-in-to-you-github-account-on-your-browser","title":"Sign In to you GitHub account on your browser.","text":"<ol> <li>Navigate to https://github.com/apps/cloudknit-app and click on Configure button. </li> </ol> <ol> <li>Select the organization CloudKnit needs to access by clicking \"Configure\" </li> </ol> <ol> <li>Now select the <code>cloudknit-config</code> repo you've created and hit Install. </li> </ol>"},{"location":"getting_started/onboard_team/","title":"Onboard a New Team","text":"<ol> <li>Copy the SSH url to your <code>cloudknit-config</code> repo     </li> <li>In your <code>cloudknit-config</code> repo create a <code>teams</code> directory</li> <li>In the <code>teams</code> directory create the following yaml file. Name it <code>[[team-name]].yaml</code>:     <pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Team\nmetadata:\nname: [[teamname]]\nnamespace: [[companyname]]-config\nspec:\nteamName: [[teamname]]\nconfigRepo:\n# Paste the SSH git URL\nsource: [[git@github.com:org/repo.git]]\npath: \".\"\n</code></pre></li> <li>Once you commit and push the change it will register the team repo with CloudKnit and watch for any updates</li> <li>The <code>cloudknit-config</code> repo should resemble:     <pre><code>root\n|   README.md\n|___teams\n|   |   team-name.yaml\n</code></pre></li> </ol>"},{"location":"getting_started/setup/","title":"Getting Started","text":"<p>Welcome to CloudKnit. This will guide you through how to get started.</p> <ol> <li>Create a CloudKnit account here by clicking <code>Login with Github</code></li> <li>If you're not already part of an organization, you'll need to register an organization on CloudKnit</li> <li>Create a <code>cloudknit-config</code> git repo within your Github organization.</li> <li>Go here to give our CloudKnit Github app access to your newly created repo</li> <li>Now you're ready to onboard a team</li> <li>Configure AWS credentials</li> <li>Provisioning your first environment</li> </ol>"},{"location":"getting_started/setup/#give-access-to-cloudknit-config-terraform-modules-repo","title":"Give access to CloudKnit config &amp; terraform modules repo","text":"<p>Install CloudKnit Github App using steps here</p>"},{"location":"policies/approval/","title":"Approval","text":"<p>If you wish for the Terraform plan to apply without requiring a manual approval step, you can do so by setting a property called <code>autoApprove</code>.</p> <p>When you are defining an environment, you can set the <code>autoApprove</code> flag to <code>true</code>, at the environment level or component level.</p> <p>When the plan is run, the reconciler looks for this property which tells it whether to ask for explicit approval at the time of provisioning, teardown, or reconciling the environment - or - to automatically approve the plan.</p> <p>This is an optional field, with the default value as <code>false</code>.</p> <p>In the case that <code>autoApprove</code> flag was not specified or set to <code>false</code>, a prompt for approval will appear for each component being provisioned or destroyed. Details on how to approve are here.</p> <p>NOTE: The <code>autoApprove</code> flag can be configured for all components in an environment at the spec level, and can also be specified at the component level, which will override the spec level configuration for that environment.</p> <p>Sample YAML</p>"},{"location":"policies/approval/#apiversion-stablecloudknitiov1-kind-environment-metadata-name-dev-checkout-sandbox-namespace-zlifecycle-spec-teamname-checkout-envname-sandbox-autoapprove-false-spec-level-components-name-networking-autoapprove-true-this-will-override-the-one-at-spec-level-type-terraform-module-source-aws-name-vpc-variablesfile-source-gitgithubcomgithubrepogit-add-your-repo-here-path-sandboxtfvarsnetworkingtfvars-add-your-tfvars-here-outputs-name-vpc_id-name-public_subnets-name-private_subnets-name-vpc_cidr_block","title":"<pre><code>apiVersion: stable.cloudknit.io/v1\nkind: Environment\nmetadata:\n  name: dev-checkout-sandbox\n  namespace: zlifecycle\nspec:\n  teamName: checkout\n  envName: sandbox  \n  autoApprove: false # spec level\n  components:\n    - name: networking\n      autoApprove: true # this will override the one at spec level\n      type: terraform\n      module:\n        source: aws\n        name: vpc\n      variablesFile:\n        source: \"git@github.com:githubRepo.git\" # Add your repo here\n        path: \"sandbox/tfvars/networking.tfvars\" # Add your tfvars here\n      outputs:\n        - name: vpc_id\n        - name: public_subnets\n        - name: private_subnets\n        - name: vpc_cidr_block\n</code></pre>","text":""},{"location":"policies/auto/","title":"Auto Drift Detection &amp; Reconcile","text":"<p>COMING SOON</p>"},{"location":"policies/cost_estimates/","title":"Cost Estimates","text":"<p>Costs are monthly estimates calculated at the time of last reconciliation. Estimated costs are calculated on the basis of resources that a component uses.</p> <p>Example</p> <p></p> <p>CloudKnit uses infracost to calculate the component cost. You can find list of supported resources by Infracost here.</p> <p>Estimated costs for an Environment is based on the sum of estimates for all components. Similarly, estimated monthly costs of all environments for team is based on the sum of cost estimates for all environments. </p>"},{"location":"policies/destroy/","title":"Destroying Components","text":"<p>This property is used to destroy a component. When an environment is brought down, we refer to it as <code>teardown</code> and when a component is brought down, it is <code>destroy</code></p> <p>NOTE: The component-level <code>destroy</code> property overrides the spec-level <code>teardown</code> property, which means that if <code>teardown</code> is <code>false</code> and <code>destroy</code> is <code>true</code>, the current component will be destroyed.</p> <p>This is an optional field, with the default value as <code>false</code>.</p> <p>You can find more information about teardown here.</p>"},{"location":"policies/destroy/#destroy-protection","title":"Destroy Protection","text":"<p>You can always safeguard a component from getting destroyed by applying some protection to it using the <code>destroyProtection</code> flag. When set to <code>true</code> the current component will not be destroyed, overriding all other flags including the environment-level <code>teardown</code>.</p> <p>This is also an optional field, with the default value as <code>false</code>.</p> <p>Sample YAML <pre><code> components:\n    - name: static-assets\n      type: terraform\n      destroy: false\n      destroyProtection: true\n</code></pre></p>"},{"location":"policies/manual/","title":"Manual Reconcile","text":"<p>Environment reconciliation can happen in two ways. A gitops push will trigger an environment to reconcile and re-provision based on the latest plan, but you can also manually trigger a reconcile which will re run the last plan.</p> <p>You can reconcile and synchronize your environment, either from the environment card or from the DAG view.</p> <p>You will also get a notification in the bottom right corner once reconciliation started.</p>"},{"location":"policies/manual/#environment-card","title":"Environment Card","text":"<p>From the Environments page -</p> <p></p> <p>There is a green sync icon on the environment card, click that icon to reconcile the environment.</p>"},{"location":"policies/manual/#dag-view","title":"DAG View","text":"<p>From the Environment DAG view.</p> <p></p> <p>There is a sync button, at the top right region of the page, click that icon to reconcile the environment.</p>"},{"location":"policies/manual/#status","title":"Status","text":"<ul> <li>Green: Synced</li> <li>Grey: Not In Sync</li> <li>Red: Error</li> <li>Rotating: Sync In Progress</li> </ul>"},{"location":"policies/manual_approval/","title":"How to Approve","text":"<p>If the <code>autoApprove</code> flag is set to <code>false</code> or is omitted (defaults to <code>false</code>) the plan will need to be manually approved before it can proceed with applying. Details on how and where to set these flags are here.</p> <p>In this sample example we are provisioning an environment called sandbox.</p> <p>Once your YAML is pushed, you will see a similar card on CloudKnit Environments page.</p> <p></p> <p></p> <p></p> <p>Click the required environment to navigate to the DAG View.</p> <p></p> <p></p> <p>As shown in the above image, with autoApprove as <code>false</code> once our environments plan completes our component now waits for approval for provisioning. Once at this page click on the component which you want to approve.</p> <p></p> <p></p> <p></p> <p>Once clicked, you will see a right panel (which is a component details view) as shown in the above image. Now you can click on the approve button and then on the confirm button to continue with the provisioning of your environment.</p> <p>Click here to know more about the component details view</p> <p>Once approved, wait for CloudKnit to provision your environment. After its completed, you will see a similar view to the image below:</p> <p></p> <p></p> <p></p>"},{"location":"policies/selective_reconcile/","title":"Selective Reconcile","text":"<p>Selective reconcile can be used when only certain components should be re-provisioned within an environment. With this configuration re-provisioning an environment can leave some components untouched.</p> <ol> <li>The First step is to identify the components you wish to selectively reconcile. Add selectiveReconcile to the spec scope in yaml. <pre><code>selectiveReconcile:\ntagName: helloWorldComponentType\ntagValues: [app, data]\n</code></pre></li> </ol> <p>tagName: This is a string property that should match the tags property of a component.</p> <p>tagValues: An array of string values. Here we specify the values of the property type specified in <code>tagName</code>.</p> <ol> <li>The Second part is the tags property, in the component scope.</li> </ol> <pre><code>tags:\n- name: helloWorldComponentType value: app\n</code></pre> <p>name: The name property needs to be exactly what we supplied in the tagName property of selectiveReconcile which in our example is <code>componentType</code>. value: Value needs to be one of the strings passed in the tagValues property of selectiveReconcile which in our example is <code>app</code>.</p> <p>NOTE: If tearing down or reconciling an environment, components left out of the selectiveReconcile will show a status of <code>Skipped Teardown</code> or <code>Skipped Reconcile</code>.</p>"},{"location":"policies/selective_reconcile/#skip-mode","title":"Skip Mode","text":"<p>It is also possible to use selectiveReconcile to apply the inverse policy, and skip components matching the tags, reconciling all others. </p> <pre><code>selectiveReconcile:\nskipMode: true\ntagName: helloWorldComponentType\ntagValues: [app, data]\n</code></pre> <p>In that case CloudKnit compares the above properties and sets up matching components to be skipped.</p>"},{"location":"policies/teardown/","title":"Teardown","text":"<p>You can teardown an entire environment using one of the options below:</p>"},{"location":"policies/teardown/#keep-environment-config-in-repo","title":"Keep Environment Config in repo","text":"<p>This option is helpful if you want to easily re-provision the environment at a later time.</p> <ol> <li>Update/Add <code>teardown</code> flag with value <code>true</code> </li> <li>Commit &amp; Push your changes to the repo</li> <li>The environment components will start destroying one by one (monitor progress on the CloudKnit UI)</li> </ol>"},{"location":"policies/teardown/#remove-environment-config-from-repo","title":"Remove Environment Config from repo","text":"<ol> <li>Delete the Environment config (yaml, tfvars, tf files etc)</li> <li>Commit &amp; Push changes to the repo</li> <li>The environment components will start destroying one by one (monitor progress on the CloudKnit UI) </li> </ol>"},{"location":"settings/aws_credentials/","title":"AWS Credentials","text":"<p>AWS credentials are used by CloudKnit to provision your environment on AWS. You can provision an environment on AWS only after setting these credentials.</p> <p>These credentials can be created &amp; updated using CloudKnit secrets manager, which is accessible by clicking on the Settings Navigation button, as highlighted in the below image.</p> <p></p> <p>AWS secrets that need to be set:</p> <p></p> <ul> <li><code>Access Key Id</code></li> <li><code>Secret Access Key</code></li> <li><code>Session Token</code> [Optional]</li> </ul> <p>There are 3 scopes to which these secrets can be added, <code>org</code>, <code>team</code>, <code>environment</code>. By default, CloudKnit tries to find secrets at environment level, then at team level and lastly at org level.</p>"},{"location":"settings/secrets/","title":"Environment Secrets","text":"<p>If you want to pass a secret to a component (for example a terraform module) you can create a secret using settings page and then reference it in the environment YAML. </p> <p>There are 3 scopes at which these secrets can be added, <code>org</code>, <code>team</code>, <code>environment</code> on the settings page.</p> <p></p> <p>To add a secret, go to the appropriate scope and click on the New button on the <code>Secrets</code> tab.</p> <p></p> <p>Once added these secrets can be used in the secrets property of the environment YAML as below.</p> <p>Example</p> <pre><code>secrets:\n- name: bucket      # Terraform variable name\nkey: s3-name      # Secret Id\nscope: org        # Should be one of: org, team, environment\n</code></pre>"},{"location":"settings/users/","title":"Users","text":"<p>If you have admin permissions to your organization in CloudKnit, you can manage other Users using Settings --&gt; Users page. </p> <p></p>"},{"location":"settings/users/#invite-another-user","title":"Invite another user","text":"<p>To invite a user fill in details as seen in the above screenshot then click the <code>Create</code> button. After the user has been added, they can go to https://cloudknit.app and login with their Github credentials.</p> <p>We currently have 2 user levels:  * Admin - They can perform all operations in their org * User - They cannot change any Settings but can do any other operation in their org</p>"},{"location":"settings/users/#remove-existing-user","title":"Remove existing user","text":"<p>To remove an existing user from the org, find them in the list of Existing Users and hit the Delete icon and hit confirm. User won't be able to login to CloudKnit after they are removed. </p> <p>Note: If you remove a user by mistake you can always add them back.</p>"},{"location":"support/supported_platforms/","title":"Supported Platforms","text":"Supported Coming soon Cloud Vendors Amazon Web Service (AWS) - Google Cloud Platform (GCP)  - Microsoft Azure Framework Terraform Argo CD"}]}