---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: terraform-sync-template
spec:
  entrypoint: update
  volumes:
    - name: github-ssh-key-mount
      secret:
        secretName: zlifecycle-provisioner-ssh
        defaultMode: 384
    - name: internal-github-app-ssh
      secret:
        secretName: internal-github-app-ssh
        defaultMode: 384
    - name: public-github-app-ssh
      secret:
        secretName: public-github-app-ssh
        defaultMode: 384
  templates:
    - name: update
      inputs:
        parameters:
          - name: customer_id
          - name: team_name
          - name: env_name
          - name: config_name
          - name: il_repo
          - name: terraform_il_path
          - name: is_destroy
          - name: auto_approve
          - name: config_reconcile_id
          - name: reconcile_id
          - name: skip_component
          - name: zl_environment
          - name: git_auth_mode
          - name: company_git_org
          - name: use_custom_state
          - name: custom_state_bucket
          - name: custom_state_lock_table
          - name: workspace
      steps:
        - - name: plan
            templateRef:
              name: terraform-run-template
              template: run
            arguments:
              parameters:
                - name: team_name
                  value: '{{ printf "{{inputs.parameters.team_name}}" }}'
                - name: env_name
                  value: '{{ printf "{{inputs.parameters.env_name}}" }}'
                - name: config_name
                  value: '{{ printf "{{inputs.parameters.config_name}}" }}'
                - name: il_repo
                  value: '{{ printf "{{inputs.parameters.il_repo}}" }}'
                - name: terraform_il_path
                  value: '{{ printf "{{inputs.parameters.terraform_il_path}}" }}'
                - name: is_apply
                  value: "0"
                - name: is_sync
                  value: "1"
                - name: is_destroy
                  value: '{{ printf "{{inputs.parameters.is_destroy}}" }}'
                - name: config_reconcile_id
                  value: '{{ printf "{{inputs.parameters.config_reconcile_id}}" }}'
                - name: reconcile_id
                  value: '{{ printf "{{inputs.parameters.reconcile_id}}" }}'
                - name: customer_id
                  value: '{{ printf "{{inputs.parameters.customer_id}}" }}'
                - name: auto_approve
                  value: '{{ printf "{{inputs.parameters.auto_approve}}" }}'
                - name: zl_environment
                  value: '{{ printf "{{inputs.parameters.zl_environment}}" }}'
                - name: git_auth_mode
                  value: '{{ printf "{{inputs.parameters.git_auth_mode}}" }}'
                - name: company_git_org
                  value: '{{ printf "{{inputs.parameters.company_git_org}}" }}'
                - name: use_custom_state
                  value: '{{ printf "{{inputs.parameters.use_custom_state}}" }}'
                - name: custom_state_bucket
                  value: '{{ printf "{{inputs.parameters.custom_state_bucket}}" }}'
                - name: custom_state_lock_table
                  value: '{{ printf "{{inputs.parameters.custom_state_lock_table}}" }}'
                - name: workspace
                  value: '{{ printf "{{inputs.parameters.workspace}}" }}'
        - - name: approve
            template: approve
            arguments:
              parameters:
                - name: auto_approve
                  value: '{{ printf "{{inputs.parameters.auto_approve}}" }}'
            when: '{{ printf "{{steps.plan.outputs.parameters.planCode}}" }} == 2 && {{ printf "{{inputs.parameters.auto_approve}}" }} != true'
        - - name: apply
            templateRef:
              name: terraform-run-template
              template: run
            arguments:
              parameters:
                - name: team_name
                  value: '{{ printf "{{inputs.parameters.team_name}}" }}'
                - name: env_name
                  value: '{{ printf "{{inputs.parameters.env_name}}" }}'
                - name: config_name
                  value: '{{ printf "{{inputs.parameters.config_name}}" }}'
                - name: il_repo
                  value: '{{ printf "{{inputs.parameters.il_repo}}" }}'
                - name: terraform_il_path
                  value: '{{ printf "{{inputs.parameters.terraform_il_path}}" }}'
                - name: is_apply
                  value: "1"
                - name: is_sync
                  value: "1"
                - name: is_destroy
                  value: '{{ printf "{{inputs.parameters.is_destroy}}" }}'
                - name: config_reconcile_id
                  value: '{{ printf "{{inputs.parameters.config_reconcile_id}}" }}'
                - name: reconcile_id
                  value: '{{ printf "{{inputs.parameters.reconcile_id}}" }}'
                - name: customer_id
                  value: '{{ printf "{{inputs.parameters.customer_id}}" }}'
                - name: auto_approve
                  value: '{{ printf "{{inputs.parameters.auto_approve}}" }}'
                - name: skip_component
                  value: '{{ printf "{{inputs.parameters.skip_component}}" }}'
                - name: zl_environment
                  value: '{{ printf "{{inputs.parameters.zl_environment}}" }}'
                - name: git_auth_mode
                  value: '{{ printf "{{inputs.parameters.git_auth_mode}}" }}'
                - name: company_git_org
                  value: '{{ printf "{{inputs.parameters.company_git_org}}" }}'
                - name: use_custom_state
                  value: '{{ printf "{{inputs.parameters.use_custom_state}}" }}'
                - name: custom_state_bucket
                  value: '{{ printf "{{inputs.parameters.custom_state_bucket}}" }}'
                - name: custom_state_lock_table
                  value: '{{ printf "{{inputs.parameters.custom_state_lock_table}}" }}'
                - name: workspace
                  value: '{{ printf "{{inputs.parameters.workspace}}" }}'
            when: '{{ printf "{{steps.plan.outputs.parameters.planCode}}" }} == 2'

    - name: approve
      suspend: {}
