# Copyright (C) 2020 CompuZest, Inc. - All Rights Reserved
#
# Unauthorized copying of this file, via any medium, is strictly prohibited
# Proprietary and confidential
#
# NOTICE: All information contained herein is, and remains the property of
# CompuZest, Inc. The intellectual and technical concepts contained herein are
# proprietary to CompuZest, Inc. and are protected by trade secret or copyright
# law. Dissemination of this information or reproduction of this material is
# strictly forbidden unless prior written permission is obtained from CompuZest, Inc.
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: terraform-sync-template
  namespace: argocd
spec:
  entrypoint: update
  volumes:
    - name: github-ssh-key-mount
      secret:
        secretName: zlifecycle-provisioner-ssh
        defaultMode: 384
  templates:
    - name: update
      inputs:
        parameters:
          - name: customer_id
          - name: team_name
          - name: env_name
          - name: config_name
          - name: module_source
          - name: module_source_path
          - name: il_repo
          - name: terraform_il_path
          - name: is_destroy
          - name: auto_approve
          - name: config_reconcile_id
          - name: reconcile_id
          - name: destroy_protection
      steps:
        - - name: plan
            templateRef:
              name: terraform-run-template
              template: run
            arguments:
              parameters:
                - name: team_name
                  value: '{{ printf "{{inputs.parameters.team_name}}" }}'
                - name: env_name
                  value: '{{ printf "{{inputs.parameters.env_name}}" }}'
                - name: config_name
                  value: '{{ printf "{{inputs.parameters.config_name}}" }}'
                - name: module_source
                  value: '{{ printf "{{inputs.parameters.module_source}}" }}'
                - name: module_source_path
                  value: '{{ printf "{{inputs.parameters.module_source_path}}" }}'
                - name: il_repo
                  value: '{{ printf "{{inputs.parameters.il_repo}}" }}'
                - name: terraform_il_path
                  value: '{{ printf "{{inputs.parameters.terraform_il_path}}" }}'
                - name: is_apply
                  value: "0"
                - name: is_sync
                  value: "1"
                - name: is_destroy
                  value: '{{ printf "{{inputs.parameters.is_destroy}}" }}'
                - name: config_reconcile_id
                  value: '{{ printf "{{inputs.parameters.config_reconcile_id}}" }}'
                - name: reconcile_id
                  value: '{{ printf "{{inputs.parameters.reconcile_id}}" }}'
                - name: customer_id
                  value: '{{ printf "{{inputs.parameters.customer_id}}" }}'
        - - name: notify
            template: notify
            arguments:
              parameters:
                - name: team_name
                  value: '{{ printf "{{inputs.parameters.team_name}}" }}'
                - name: env_name
                  value: '{{ printf "{{inputs.parameters.env_name}}" }}'
                - name: config_name
                  value: '{{ printf "{{inputs.parameters.config_name}}" }}'
            when: '{{ printf "{{steps.plan.outputs.parameters.planCode}}" }} == 2'
        - - name: approve
            template: approve
            arguments:
              parameters:
                - name: auto_approve
                  value: '{{ printf "{{inputs.parameters.auto_approve}}" }}'
            when: '{{ printf "{{steps.plan.outputs.parameters.planCode}}" }} == 2 && {{ printf "{{inputs.parameters.auto_approve}}" }} != true'
        - - name: apply
            templateRef:
              name: terraform-run-template
              template: run
            arguments:
              parameters:
                - name: team_name
                  value: '{{ printf "{{inputs.parameters.team_name}}" }}'
                - name: env_name
                  value: '{{ printf "{{inputs.parameters.env_name}}" }}'
                - name: config_name
                  value: '{{ printf "{{inputs.parameters.config_name}}" }}'
                - name: module_source
                  value: '{{ printf "{{inputs.parameters.module_source}}" }}'
                - name: module_source_path
                  value: '{{ printf "{{inputs.parameters.module_source_path}}" }}'
                - name: il_repo
                  value: '{{ printf "{{inputs.parameters.il_repo}}" }}'
                - name: terraform_il_path
                  value: '{{ printf "{{inputs.parameters.terraform_il_path}}" }}'
                - name: is_apply
                  value: "1"
                - name: is_sync
                  value: "1"
                - name: is_destroy
                  value: '{{ printf "{{inputs.parameters.is_destroy}}" }}'
                - name: config_reconcile_id
                  value: '{{ printf "{{inputs.parameters.config_reconcile_id}}" }}'
                - name: reconcile_id
                  value: '{{ printf "{{inputs.parameters.reconcile_id}}" }}'
                - name: customer_id
                  value: '{{ printf "{{inputs.parameters.customer_id}}" }}'
                - name: destroy_protection
                  value: '{{ printf "{{inputs.parameters.destroy_protection}}" }}'
            when: '{{ printf "{{steps.plan.outputs.parameters.planCode}}" }} == 2 && (({{ printf "{{inputs.parameters.is_destroy}}" }} == true && {{ printf "{{inputs.parameters.destroy_protection}}" }} == false) || {{ printf "{{inputs.parameters.is_destroy}}" }} == false)'

    - name: approve
      suspend: {}

    - name: notify
      inputs:
        parameters:
          - name: team_name
          - name: env_name
          - name: config_name
      serviceAccountName: argo
      script:
        imagePullPolicy: Always
        image: "413422438110.dkr.ecr.us-east-1.amazonaws.com/zlifecycle-terraform:{{.Values.imageTag}}"
        cmd:
          - sh
        source: |
          ./send_slack_notification.sh '{{ printf "{{workflow.name}}" }}' '{{ printf "{{inputs.parameters.team_name}}" }}' '{{ printf "{{inputs.parameters.env_name}}" }}' '{{ printf "{{inputs.parameters.config_name}}" }}'
